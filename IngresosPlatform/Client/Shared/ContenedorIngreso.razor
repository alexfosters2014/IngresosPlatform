@inject IJSRuntime js
@using Comun
@inject IServiceIngreso serviceIngreso
@inject IServiceUsuario serviceUsuario
@inject HubConnection hubConnection

@if (ingresosDTO.Count > 0)
{
    <div class="recuadroAutorizaciones">
        <div class="row">
            <div class="col">
                <h5>@proveedorDTO.Rut</h5>
            </div>
            <div class="col">
                <h5>@proveedorDTO.RazonSocial</h5>
            </div>
            <div class="col">
                <h5>@proveedorDTO.NombreFantasia</h5>
            </div>
            <div class="col">
                <h5>Cantidad: @ingresosDTO.Count</h5>
            </div>
        </div>

        <div class="row">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Cedula</th>
                        <th scope="col">Funcionario</th>
                        <th scope="col">Hora entrada</th>
                        <th scope="col">Hora salida</th>
                        <th scope="col">Desde</th>
                        <th scope="col">Hasta</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ing in ingresosDTO)
                    {
                        <tr>
                            <td><img src="/img/indicadores/@ing.Indicador" alt="foto" class="indicadores" /></td>
                            <td>@ing.Funcionario.Cedula</td>
                            <td>@ing.Funcionario.Nombre</td>
                            <td>@ing.EntradaPlanificada.Value.ToString("HH:mm")</td>
                            <td>@ing.SalidaPlanificada.Value.ToString("HH:mm")</td>
                            <td>@ing.FechaInicio.Value.ToString("dd/MM/yyyy")</td>
                            <td>@ing.FechaFin.Value.ToString("dd/MM/yyyy")</td>
                            <td><a href="" @onclick="(() => VerDatosFuncionario(ing.Funcionario.Id))" @onclick:preventDefault class="btn btn-primary">Ver</a></td>
                            <td>
                                <a href="" @onclick="(() => IngresoAutorizado(ing, SD.TipoAutIng.AUTORIZADO.ToString()))" @onclick:preventDefault class="btn btn-primary">Habilitar</a>
                                <a href="" @onclick="(() => IngresoNOAutorizado(ing, SD.TipoAutIng.NOAUTORIZADO.ToString()))" @onclick:preventDefault class="btn btn-primary">No Habilitar</a>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
    </div>
}


@code {
    [Parameter]
    public List<IngresoDTO> ingresosDTO { get; set; }
    [Parameter]
    public ProveedorDTO proveedorDTO { get; set; }

    private bool visible = true;

    private void noVisible()
    {
        visible = false;
    }

    private async Task VerDatosFuncionario(int funcionarioId)
    {
        await js.InvokeVoidAsync("open", $"/Funcionario/{funcionarioId}", "_blank");
    }
    private async Task IngresoAutorizado(IngresoDTO ingDTO, string autorizado)
    {
        bool confirmacion = await js.MsgConfirmacion("Desea confirmar la habilitación de ingreso al funcionario seleccionado?");
        if (confirmacion)
        {
            ingDTO.EstadoAutorizacion = SD.TipoAutIng.AUTORIZADO.ToString();
            IngresoDTO resultado = await serviceIngreso.ActualizarIngreso(ingDTO);
            if (resultado != null)
            {
                await js.MsgExitoso("Se autorizó exitosamente");
                await Enviar(SD.TipoUsuario.OperadorIngPlt.ToString(), "Nuevos ingresos");
                ingresosDTO.Remove(ingDTO);
                StateHasChanged();
            }
            else
            {
                ingDTO.EstadoAutorizacion = SD.TipoAutIng.PENDIENTE.ToString();
                await js.MsgError("No se pudo realizar la autorización");
            }
        }
    }

    private async Task IngresoNOAutorizado(IngresoDTO ingDTO, string autorizado)
    {
        try {
            string comentarios = await js.OnInputText();
            if (comentarios != "NOTCONFIRMED")
            {
                if (!string.IsNullOrEmpty(comentarios))
                {
                    ingDTO.EstadoAutorizacion = SD.TipoAutIng.NOAUTORIZADO.ToString();
                    ingDTO.Comentarios = comentarios;
                    IngresoDTO resultado = await serviceIngreso.ActualizarIngreso(ingDTO);
                    if (resultado != null)
                    {
                        await js.MsgExitoso("Se envió la no autorización exitosamente");
                        await Enviar(proveedorDTO.Rut, "Se autorizaron todos los ingresos enviados");
                        ingresosDTO.Remove(ingDTO);

                        await serviceUsuario.EnviarMail(new MailMensajeDTO() { EnviarA = proveedorDTO.Email, MensajeAEnviar = "Sr. proveedor: Hay ingreso/s que deberia revisar" });

                        StateHasChanged();
                    }
                    else
                    {
                        ingDTO.EstadoAutorizacion = SD.TipoAutIng.PENDIENTE.ToString();
                        ingDTO.Comentarios = "";
                        await js.MsgError("No se pudo realizar la autorización");
                    }
                }
                else
                {
                    await js.MsgAdvertencia("Debe poner un comentario para que el proveedor vea porque no se autorizó");
                }
            }
        }catch(Exception ex)
        {
            await js.MsgError("Algun proceso no se pudo realizar.");
        }
    }
    private async Task Enviar(string usuarioEnvio, string mensajeEnvio) => await hubConnection.SendAsync("EnviarNotificacion", usuarioEnvio, mensajeEnvio);

}
