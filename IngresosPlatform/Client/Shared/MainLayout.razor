@inherits LayoutComponentBase
@inject ILocalStorageService localStorage
@inject NavigationManager nav
@inject IJSRuntime js
@inject HubConnection hubConnection
@inject IToastService toastService

<div class="page">
    <div class="sidebar">
        @if (TipoUsuario == SD.TipoUsuario.OperadorIngPlt.ToString())
        {
            <NavMenuOperador />
        }
        @if (TipoUsuario == SD.TipoUsuario.ProveedorIngPlt.ToString())
        {
            <NavMenuProveedor />
        }
    </div>

    <div class="main">
        <div class="top-row px-4 justify-content-between">
            <div style="width:1%;">
            </div>
            <div>
                <a href="" @onclick="VerMensajes" @onclick:preventDefault><img src="/img/@PathMensaje" class="botonPDFVisor" /></a>
            </div>
            <div>
                <a href="" @onclick="Salir" @onclick:preventDefault>Cerrar Sesión</a>
            </div>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>
<BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopCenter" 
                           IconType="IconType.FontAwesome" 
                           InfoIcon="fa fa-info"/>

@code{
    UsuarioDTO usuarioDTO = null;
    string TipoUsuario = "";
    List<string> mensajes = new List<string>();
    string PathMensaje = "message.png";

    protected override async Task OnInitializedAsync()
    {
        await CargaMenu();
        hubConnection.On<string, string>("RecibirNotificacion", (usuario, mensaje) =>
        {
            if (usuario == SD.TipoUsuario.OperadorIngPlt.ToString() && TipoUsuario == SD.TipoUsuario.OperadorIngPlt.ToString())
            {
                mensajes.Reverse();
                mensajes.Add(mensaje);
                mensajes.Reverse();
                PathMensaje = "messageNotification.png";
                StateHasChanged();
            }
            else if (usuario == usuarioDTO.Proveedor.Rut)
            {
                mensajes.Reverse();
                mensajes.Add(mensaje);
                mensajes.Reverse();
                PathMensaje = "messageNotification.png";
                StateHasChanged();
            }
        });
        await hubConnection.StartAsync();

    }

    private async Task CargaMenu()
    {
        try
        {
            usuarioDTO = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);
            if (usuarioDTO != null)
            {
                TipoUsuario = usuarioDTO.TipoUsuario;
            }
            else
            {
                nav.NavigateTo("/",true);
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            nav.NavigateTo("/",true);
        }


    }
    private async Task Salir()
    {
        bool confirmacion = await js.MsgConfirmacion("Desea Salir de la sesión?");
        if (confirmacion)
        {
            await hubConnection.DisposeAsync();
            await localStorage.ClearAsync();
            nav.NavigateTo("/",true);
        }
    }

    private async Task VerMensajes()
    {
        foreach (string str in mensajes.Take(5))
        {
            PathMensaje = "messageNotification.png";
            toastService.ShowInfo(str,"Notificaciones");
        }
    }
}