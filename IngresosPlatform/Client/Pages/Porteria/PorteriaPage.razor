@page "/Porteria"
@layout EmptyLayout
@inject IServiceIngresoDiario serviceIngresoDiario
@inject IJSRuntime js
@inject ILocalStorageService localStorage
@inject NavigationManager nav
@inject HubConnection hubConnection

<div class="recuadroPorteria">
    <div class="d-flex justify-content-around">
        <div>
            <img src="/img/@PathMensaje" class="nuevoBoton" />
        </div>
        <div class="form-inline">
            <input type="date" value="@maxFecha.ToString("yyyy-MM-dd")" max="@maxFecha.ToString("yyyy-MM-dd")" class="form-control"
                   @onchange="@((e) => Resetear(e.Value.ToString()))" />
            <button type="button" class="btn btn-primary ml-3" @onclick="onClickVer">Ver</button>

        </div>

        <div>
            <a href="" @onclick="Salir" @onclick:preventDefault class="nav-link">Salir</a>
        </div>
    </div>
</div>
@if (ingresosXProveedor != null && ingresosXProveedor.Any() && carga)
{<div class="d-flex justify-content-end">
        <img src="/img/actualizar.png" class="botonPDFVisor" @onclick="Actulizar" />
    </div>
    <section class="row">

        <div class="col-3">
            <div class="myScrollBar">
                <ul class="list-group">
                    @foreach (var pro in ingresosXProveedor)
                    {
                        <a href="" class="list-group-item listPorteria"
                           @onclick="(() => CargarIngresodelPRoveedor(pro.IngresosDiarios.First().Proveedor))"
                           @onclick:preventDefault>@pro.IngresosDiarios.First().Proveedor.NombreFantasia (@pro.IngresosDiarios.First().Proveedor.RazonSocial) </a>
                    }
                </ul>
            </div>
        </div>

        @if (ingresosSeleccionados != null)
        {
            <div class="col-9">
                <div class="row justify-content-between">
                    <h2>@proveedorSeleccionado.RazonSocial (@proveedorSeleccionado.NombreFantasia)</h2>
                    <h2>@hoy.ToString("dd/MM/yyyy")</h2>
                </div>
                <div class="row">
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th style="width:10%;">Cedula</th>
                                <th style="width:30%;">Funcionario</th>
                                <th style="width:10%;">Entrada</th>
                                <th style="width:10%;">Salida</th>
                                <th style="width:20%;"></th>
                                <th style="width:20%;"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ingProv in ingresosSeleccionados)
                            {
                                <tr>
                                    <td>@ingProv.Funcionario.Cedula</td>
                                    <td>@ingProv.Funcionario.Nombre</td>
                                    <td>@ingProv.EntradaPlanificada.ToString("HH:mm")</td>
                                    <td>@ingProv.SalidaPlanificada.ToString("HH:mm")</td>
                                    @if (ingProv.EntradaEfectiva == null)
                                    {
                                        <td class="pull-right"><a href="" @onclick="(() => MarcarEntrada(ingProv))" @onclick:preventDefault class="btn btn-success">Marcar Entrada</a></td>
                                    }
                                    else
                                    {
                                        <td>@ingProv.EntradaEfectiva.Value.ToString("HH:mm")</td>
                                    }
                                    @if (ingProv.SalidaEfectiva == null)
                                    {
                                        <td class="pull-right"><a href="" @onclick="(() => MarcarSalida(ingProv))" @onclick:preventDefault class="btn btn-warning">Marcar Salida</a></td>
                                    }
                                    else
                                    {
                                        <td>@ingProv.SalidaEfectiva.Value.ToString("HH:mm")</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

        }
    </section>

}
else if (ingresosXProveedor != null && ingresosXProveedor.Count == 0)
{
    <div class="d-flex align-content-center align-items-center">
        <h4 style="color:orangered">No hay ingresos para visualizar</h4>
    </div>
}
else if (carga)
{
    <Loading />
}

@code
{
    DateTime hoy { get; set; } = DateTime.Today;
    string PathMensaje = "message.png";

    List<IngresoDiarioxProveedor> ingresosXProveedor { get; set; } = null;
    ProveedorDTO proveedorSeleccionado { get; set; } = null;
    List<IngresoDiarioDTO> ingresosSeleccionados { get; set; } = null;
    UsuarioDTO usuarioDTO { get; set; } = null;
    bool carga = false;
    private DateTime maxFecha = DateTime.Today.Date;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            usuarioDTO = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);

            if (usuarioDTO == null && usuarioDTO.TipoUsuario != SD.TipoUsuario.OperadorIngPlt.ToString())
            {
                nav.NavigateTo("/",true);
            }
            hubConnection.On<string, string>("RecibirNotificacion", (usuario, mensaje) =>
            {
                if (usuario == SD.TipoUsuario.PorteriaIngPlt.ToString() && usuarioDTO.TipoUsuario == SD.TipoUsuario.PorteriaIngPlt.ToString())
                {
                    PathMensaje = "messageNotification.png";
                    StateHasChanged();
                }
            });
            await hubConnection.StartAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            nav.NavigateTo("/",true);
        }

    }
    private async Task onClickVer()
    {
        await CargaInicial();
    }

    private async Task CargaInicial()
    {
        carga = true;
        ingresosXProveedor = await serviceIngresoDiario.ObtenerSinMarcaciones(new VMGeneral() { FechaActual = hoy });
        StateHasChanged();
    }
    private async Task Actulizar()
    {
        await CargaInicial();
    }


    private void CargarIngresodelPRoveedor(ProveedorDTO proveedor)
    {
        proveedorSeleccionado = proveedor;
        var filtro = ingresosXProveedor.Where(w => w.ProveedorId == proveedor.Id).Select(s => s.IngresosDiarios).ToList();
        ingresosSeleccionados = filtro.First();
        StateHasChanged();
    }

    private async void MarcarEntrada(IngresoDiarioDTO ingD)
    {
        bool confirmacion = await js.MsgConfirmacion("Desea marcar la entrada del funcionario?");
        if (confirmacion)
        {
            ingD.EntradaEfectiva = DateTime.Now;
            var ing = await serviceIngresoDiario.ActualizarMarcacion(ingD);
            if (ing == null)
            {
                await js.MsgError("Hubo un error. No se pudo marcar la entrada. Verifique su conexion a internet");
                ingD.EntradaEfectiva = null;
            }
            else
            {
                await js.MsgExitoso("Se marcó la entrada correctamente");
            }
            StateHasChanged();
        }
    }

    private async void MarcarSalida(IngresoDiarioDTO ingD)
    {
        if (ingD.EntradaEfectiva != null)
        {
            bool confirmacion = await js.MsgConfirmacion("Desea marcar la salida del funcionario?");
            if (confirmacion)
            {
                ingD.SalidaEfectiva = DateTime.Now;
                var ing = await serviceIngresoDiario.ActualizarMarcacion(ingD);
                if (ing == null)
                {
                    await js.MsgError("Hubo un error. No se pudo marcar la salida. Verifique su conexion a internet");
                    ingD.EntradaEfectiva = null;
                }
                else
                {
                    await js.MsgAdvertencia("Se marcó la salida correctamente");
                }
                StateHasChanged();
            }
        }
        else
        {
            await js.MsgError("Primero debe marcar una hora de entrada");
        }
    }
    private async void Salir()
    {
        bool confirmacion = await js.MsgConfirmacion("Desea Salir de la sesión?");
        if (confirmacion)
        {
            await localStorage.ClearAsync();
            nav.NavigateTo("/",true);
        }
    }
    private void Resetear(string fecha)
    {
        hoy = DateTime.ParseExact(fecha, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
        ingresosSeleccionados = null;
        carga = false;
    }

}