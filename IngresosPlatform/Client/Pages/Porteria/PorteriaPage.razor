@page "/Porteria"
@layout EmptyLayout
@inject IServiceIngresoDiario serviceIngresoDiario
@inject IJSRuntime js

    <div class="recuadroAutorizaciones">
        <div class="row justify-content-center">
                <div class="col-4">
                    <input type="date" @bind="@hoy" class="form-control" />
                    <button type="button" class="btn btn-primary" @onclick="onClickVer">Ver</button>
                </div>
        </div>
    </div>
    @if (ingresosXProveedor != null && ingresosXProveedor.Any())
    {
        <section class="row">
          
                <div class="col-3">
                    <div class="myScrollBar">
                        <ul class="list-group">
                            @foreach (var pro in ingresosXProveedor)
                            {
                                <a href="" class="list-group-item listPorteria"
                                   @onclick="(() => CargarIngresodelPRoveedor(pro.IngresosDiarios.First().Proveedor))"
                                   @onclick:preventDefault>@pro.IngresosDiarios.First().Proveedor.NombreFantasia (@pro.IngresosDiarios.First().Proveedor.RazonSocial) </a>
                            }
                        </ul>
                    </div>
                </div>

            @if (ingresosSeleccionados != null)
            {
                <div class="col-9">
                    <div class="row justify-content-between">
                        <h2>@proveedorSeleccionado.RazonSocial (@proveedorSeleccionado.NombreFantasia)</h2>
                        <h2>@hoy.ToString("dd/MM/yyyy")</h2>
                    </div>
                    <div class="row">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th style="width:10%;">Cedula</th>
                                    <th style="width:30%;">Funcionario</th>
                                    <th style="width:10%;">Entrada</th>
                                    <th style="width:10%;">Salida</th>
                                    <th style="width:20%;"></th>
                                    <th style="width:20%;"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ingProv in ingresosSeleccionados)
                                {
                                    <tr>
                                        <td>@ingProv.Funcionario.Cedula</td>
                                        <td>@ingProv.Funcionario.Nombre</td>
                                        <td>@ingProv.EntradaPlanificada.ToString("HH:mm")</td>
                                        <td>@ingProv.SalidaPlanificada.ToString("HH:mm")</td>
                                        @if (ingProv.EntradaEfectiva == null)
                                        {
                                            <td class="pull-right"><a href="" @onclick="(() => MarcarEntrada(ingProv))" @onclick:preventDefault class="btn btn-success">Marcar Entrada</a></td>
                                        }
                                        else
                                        {
                                            <td>@ingProv.EntradaEfectiva.Value.ToString("HH:mm")</td>
                                        }
                                        @if (ingProv.SalidaEfectiva == null)
                                        {
                                            <td class="pull-right"><a href="" @onclick="(() => MarcarSalida(ingProv))" @onclick:preventDefault class="btn btn-warning">Marcar Salida</a></td>
                                        }
                                        else
                                        {
                                            <td>@ingProv.SalidaEfectiva.Value.ToString("HH:mm")</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </section>
    }
    else if (ingresosXProveedor != null && ingresosXProveedor.Count == 0)
    {
        <h2>No hay ingresos para habilitar su entrada y salida</h2>
    }
    else
    {
        <Loading />
    }

    @code
{
        DateTime hoy { get; set; } = DateTime.Today;

        List<IngresoDiarioxProveedor> ingresosXProveedor { get; set; } = null;
        ProveedorDTO proveedorSeleccionado { get; set; } = null;
        List<IngresoDiarioDTO> ingresosSeleccionados { get; set; } = null;


        private void onClickVer()
        {
            CargaInicial();
        }

        private async Task CargaInicial()
        {
            ingresosXProveedor = await serviceIngresoDiario.ObtenerSinMarcaciones(new VMFecha() { FechaActual = hoy });
        }


        private void CargarIngresodelPRoveedor(ProveedorDTO proveedor)
        {
            proveedorSeleccionado = proveedor;
            var filtro = ingresosXProveedor.Where(w => w.ProveedorId == proveedor.Id).Select(s => s.IngresosDiarios).ToList();
            ingresosSeleccionados = filtro.First();
            StateHasChanged();
        }

        private async void MarcarEntrada(IngresoDiarioDTO ingD)
        {
            bool confirmacion = await js.MsgConfirmacion("Desea marcar la entrada del funcionario?");
            if (confirmacion)
            {
                ingD.EntradaEfectiva = DateTime.Now;
                var ing = await serviceIngresoDiario.ActualizarMarcacion(ingD);
                if (ing == null)
                {
                    await js.MsgError("Hubo un error. No se pudo marcar la entrada. Verifique su conexion a internet");
                    ingD.EntradaEfectiva = null;
                }
                else
                {
                    await js.MsgExitoso("Se marcó la entrada correctamente");
                }
                StateHasChanged();
            }
        }

        private async void MarcarSalida(IngresoDiarioDTO ingD)
        {
            bool confirmacion = await js.MsgConfirmacion("Desea marcar la salida del funcionario?");
            if (confirmacion)
            {
                ingD.SalidaEfectiva = DateTime.Now;
                var ing = await serviceIngresoDiario.ActualizarMarcacion(ingD);
                if (ing == null)
                {
                    await js.MsgError("Hubo un error. No se pudo marcar la salida. Verifique su conexion a internet");
                    ingD.EntradaEfectiva = null;
                }
                else
                {
                    await js.MsgExitoso("Se marcó la salida correctamente");
                }
                StateHasChanged();
            }
        }

    }