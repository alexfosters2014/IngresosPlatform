@page "/Funcionarios/Nuevo"
@using System.IO
@using Tewr.Blazor.FileReader;
@inject NavigationManager nav
@inject IServiceFuncionario serviceFuncionario
@inject ILocalStorageService localStorage
@inject IFileReaderService fileReader
@inject IJSRuntime js
@inject IServiceArchivo serviceArchivo 

<div class="container">
    <div class="d-flex justify-content-center">
        <h3>Nuevo Funcionario</h3>
    </div>
    <div class="d-flex justify-content-center">
        <section class="row">
            <div class="col-8">
                <p style="font-size:small;color:orange">Recuerde que el tamaño de los archivos deben ser hasta 2Mb</p>
            </div>
        </section>
            <section class="row">
                <div class="col-8">
                    <EditForm Model="funcionarioDTO" OnValidSubmit="AgregarNuevoFuncionario">
                        <DataAnnotationsValidator />
                        <div class="row recuadro">
                            <div class="col-12">
                                <div class="form-group">
                                    <label for="rut">Nombre y apellido del funcionario <span class="spanRojo">*</span></label>
                                    <InputText @bind-Value="funcionarioDTO.Nombre" id="rut" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.Nombre)" />
                                </div>
                            </div>
                        </div>
                        <div class="divider"></div>

                        <div class="row recuadro">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="cedula">Numero de Cedula <span class="spanRojo">*</span></label>
                                    <InputText @bind-Value="funcionarioDTO.Cedula" id="cedula" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.Cedula)" />
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="vtoCedula">Vto. de Cedula <span class="spanRojo">*</span></label>
                                    <InputDate @bind-Value="funcionarioDTO.VtoCedula" id="vtoCedula" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.VtoCedula)" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="inputFile" for="pathcedula">Subir archivo <img src="/img/upload.png" class="imgUpload"/></label>
                                    <input type="file" accept=".pdf" @ref="refCedulaEdit" @onchange="SubirPDF_PathCedula" name="pathcedula" id="pathcedula"/>
                                    <ValidationMessage For="@( () => funcionarioDTO.PathCedula)" />
                                </div>
                            </div>
                            <div class="col-12">
                                @if (!string.IsNullOrEmpty(funcionarioDTO.PathCedula))
                                {
                                    <a href="@funcionarioDTO.PathCedula" target="_blank"><img src="/img/pdf.png" class="nuevoBoton" /></a>
                                }
                            </div>
                        </div>

                        <div class="divider"></div>

                        <div class="row recuadro">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="catLibreta">Categoria de libreta conducir</label>
                                    <InputText @bind-Value="funcionarioDTO.CategoriaLibreta" id="catLibreta" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.CategoriaLibreta)" />
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="libConducir">Vto. de libreta de conducir</label>
                                    <InputDate @bind-Value="funcionarioDTO.VtoLibreta" id="libConducir" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.VtoLibreta)" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="inputFile" for="pathlibreta">Subir archivo <img src="/img/upload.png" class="imgUpload" /></label>
                                    <input type="file" accept=".pdf" @ref="refLibretaEdit" @onchange="SubirPDF_PathLibreta" name="pathlibreta" id="pathlibreta"/>
                                    <ValidationMessage For="@( () => funcionarioDTO.PathLibreta)" />
                                </div>
                            </div>
                            <div class="col-12">
                                @if (!string.IsNullOrEmpty(funcionarioDTO.PathLibreta))
                                {
                                    <a href="@funcionarioDTO.PathLibreta" target="_blank"><img src="/img/pdf.png" class="nuevoBoton" /></a>
                                }
                            </div>
                        </div>

                        <div class="divider"></div>

                        <div class="row recuadro">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="carnesalud">Vto. de carne de salud <span class="spanRojo">*</span></label>
                                    <InputDate @bind-Value="funcionarioDTO.VtoCarneSalud" id="carnesalud" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.VtoCarneSalud)" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="inputFile" for="pathcarnesalud">Subir archivo <img src="/img/upload.png" class="imgUpload" /></label>
                                    <input type="file" accept=".pdf" @ref="refCarneSaludEdit" @onchange="SubirPDF_PathCarneSalud" name="pathcarnesalud" id="pathcarnesalud"/>
                                    <ValidationMessage For="@( () => funcionarioDTO.PathCarneSalud)" />
                                </div>
                            </div>
                            <div class="col-12">
                                @if (!string.IsNullOrEmpty(funcionarioDTO.PathCarneSalud))
                                {
                                    <a href="@funcionarioDTO.PathCarneSalud" target="_blank"><img src="/img/pdf.png" class="nuevoBoton" /></a>
                                }
                            </div>
                        </div>

                        <div class="divider"></div>

                        <div class="row recuadro">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="vtoCMA">Vto. de C. Manipulación de alimentos</label>
                                    <InputDate @bind-Value="funcionarioDTO.VtoCMAlimentos" id="vtoCMA" class="form-control" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="inputFile" for="pathcma">Subir archivo <img src="/img/upload.png" class="imgUpload" /></label>
                                    <input type="file" accept=".pdf" @ref="refCarneMAEdit" @onchange="SubirPDF_PathMA" name="pathcma" id="pathcma"/>
                                </div>
                            </div>
                            <div class="col-12">
                                @if (!string.IsNullOrEmpty(funcionarioDTO.PathCMAlimentos))
                                {
                                    <a href="@funcionarioDTO.PathCMAlimentos" target="_blank"><img src="/img/pdf.png" class="nuevoBoton" /></a>
                                }
                            </div>
                        </div>

                        <div class="divider"></div>

                        <div class="row recuadro">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="altBps">Fecha de alta BPS <span class="spanRojo">*</span></label>
                                    <InputDate @bind-Value="funcionarioDTO.AltaBps" id="altBps" class="form-control" />
                                    <ValidationMessage For="@( () => funcionarioDTO.AltaBps)" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="inputFile" for="pathaltabps">Subir archivo <img src="/img/upload.png" class="imgUpload" /></label>
                                    <input type="file" accept=".pdf" @ref="refAltaBPSEdit" @onchange="SubirPDF_PathAltaBPS" name="pathaltabps" id="pathaltabps"/>
                                    <ValidationMessage For="@( () => funcionarioDTO.PathAltaBps)" />
                                </div>
                            </div>
                            <div class="col-12">
                                @if (!string.IsNullOrEmpty(funcionarioDTO.PathAltaBps))
                                {
                                    <a href="@funcionarioDTO.PathAltaBps" target="_blank"><img src="/img/pdf.png" class="nuevoBoton" /></a>
                                }
                            </div>
                        </div>
                        <div class="divider"></div>
                        @if (!carga)
                        {
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-lg">Agregar</button>
                                <button type="button" class="btn btn-primary btn-lg" @onclick="Cancelar">Cancelar</button>
                            </div>
                        }
                    </EditForm>
                    <div class="divider"></div>
                </div>
            </section>

            <section class="row">
                @if (carga)
                {
                    <Loading></Loading>
                }
            </section>

    </div>
    </div>
    @code {
        FuncionarioDTO funcionarioDTO = new FuncionarioDTO();
        private bool carga = false;

        ElementReference refCedulaEdit;
        ElementReference refLibretaEdit;
        ElementReference refCarneSaludEdit;
        ElementReference refCarneMAEdit;
        ElementReference refAltaBPSEdit;



        private async Task AgregarNuevoFuncionario()
        {
            try {
                carga = true;
                UsuarioDTO usuarioDTO = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);

                funcionarioDTO.Proveedor = usuarioDTO.Proveedor;

                FuncionarioDTO resultado = await serviceFuncionario.Agregar(funcionarioDTO);

                if (resultado != null)
                {
                    nav.NavigateTo("/Funcionarios", true);
                }
                else
                {
                    await js.MsgError("No se pudo dar de alta al nuevo funcionario. Verifique si ya fue ingresado o si los datos estan correctos");
                    carga = false;
                }
            } catch (Exception ex)
            {
                Console.WriteLine($"Error recibido: {ex.Message}");
                await js.MsgError("Hubo un error en la carga. Intente nuevamente");
            }
        }

        private async void SubirPDF_PathCedula()
        {
            var file = (await fileReader.CreateReference(refCedulaEdit).EnumerateFilesAsync()).FirstOrDefault();
            if (file != null)
            {
                string nuevaPath = await FileStream(file, funcionarioDTO.PathCedula);
                if (!string.IsNullOrEmpty(nuevaPath))
                {
                    funcionarioDTO.PathCedula = nuevaPath;
                    StateHasChanged();
                    await js.MsgExitoso("Archivo subido exitosamente");
                }
            }
            else
            {
                await js.MsgError("No se pudo subir el archivo. Intente nuevamente");
            }
        }

        private async void SubirPDF_PathLibreta()
        {
            var file = (await fileReader.CreateReference(refLibretaEdit).EnumerateFilesAsync()).FirstOrDefault();
            if (file != null)
            {
                string nuevaPath = await FileStream(file, funcionarioDTO.PathLibreta);
                if (!string.IsNullOrEmpty(nuevaPath))
                {
                    funcionarioDTO.PathLibreta = nuevaPath;
                    StateHasChanged();
                    await js.MsgExitoso("Archivo subido exitosamente");
                }
            }
            else
            {
                await js.MsgError("No se pudo subir el archivo");
            }
        }

        private async void SubirPDF_PathCarneSalud()
        {
            var file = (await fileReader.CreateReference(refCarneSaludEdit).EnumerateFilesAsync()).FirstOrDefault();
            if (file != null)
            {
                string nuevaPath = await FileStream(file, funcionarioDTO.PathCarneSalud);
                if (!string.IsNullOrEmpty(nuevaPath))
                {
                    funcionarioDTO.PathCarneSalud = nuevaPath;
                    StateHasChanged();
                    await js.MsgExitoso("Archivo subido exitosamente");
                }
            }
            else
            {
                await js.MsgError("No se pudo subir el archivo");
            }
        }

        private async void SubirPDF_PathMA()
        {
            var file = (await fileReader.CreateReference(refCarneMAEdit).EnumerateFilesAsync()).FirstOrDefault();
            if (file != null)
            {
                string nuevaPath = await FileStream(file, funcionarioDTO.PathCMAlimentos);
                if (!string.IsNullOrEmpty(nuevaPath))
                {
                    funcionarioDTO.PathCMAlimentos = nuevaPath;
                    StateHasChanged();
                    await js.MsgExitoso("Archivo subido exitosamente");
                }
            }
            else
            {
                await js.MsgError("No se pudo subir el archivo");
            }
        }

        private async void SubirPDF_PathAltaBPS()
        {
            var file = (await fileReader.CreateReference(refAltaBPSEdit).EnumerateFilesAsync()).FirstOrDefault();
            if (file != null)
            {
                string nuevaPath = await FileStream(file, funcionarioDTO.PathAltaBps);
                if (!string.IsNullOrEmpty(nuevaPath))
                {
                    funcionarioDTO.PathAltaBps = nuevaPath;
                    StateHasChanged();
                    await js.MsgExitoso("Archivo subido exitosamente");
                }
            }
            else
            {
                await js.MsgError("No se pudo subir el archivo");
            }
        }

        private void Cancelar()
        {
            nav.NavigateTo("/Funcionarios");
        }
        private async Task<string> FileStream(IFileReference file, string pathAnterior)
        {
            //validar size menor a 2Mb
            if (file == null) return "";

            var fileInfo = await file.ReadFileInfoAsync();
            Stream fileStream = null;

            double tamano = (fileInfo.Size) / 1024 / 1024;

            if (tamano > 2)
            {
                await js.MsgAdvertencia("Recuerde que en esta pantalla solo puede subir archivos pdf hasta 2Mb de tamaño");
                return "";
            }

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
            {
                fileStream = new MemoryStream(ms.ToArray());
            }
            string nuevaPath = await serviceArchivo.ActualizarArchivo(fileStream, fileInfo.Name, pathAnterior);
            fileStream.Dispose();
            return nuevaPath;
        }

       
    }
