@page "/HistorialIngresos"
@inject IServiceIngreso serviceIngreso
@inject ILocalStorageService localStorage
@inject IJSRuntime js
@inject NavigationManager nav
<div class="d-flex justify-content-center">
    <h3>Historial de Ingresos</h3>
</div>
<div class="divider"></div>

@if (ingresosDTO != null && ingresosDTO.Any())
{
    if (ingresosPendientes != null && ingresosPendientes.Count > 0)
    {
        <div class="d-flex justify-content-center">
            <h4>Historial de ingresos pendientes de autorización</h4>
        </div>
        <HistorialIngresosProveedor ingresosDTO="ingresosPendientes" />
    }

    <div style="height:10px;"></div>

    if (ingresosAutorizados != null && ingresosAutorizados.Count > 0)
    {
        <div class="d-flex justify-content-center">
            <h4>Historial de ingresos autorizados</h4>
        </div>
        <div class="divider"></div>
        <HistorialIngresosProveedor ingresosDTO="ingresosAutorizados" />

    }
}
else if (ingresosDTO != null && ingresosDTO.Count == 0)
{
    <p> No hay aun un historial</p>
}
else
{
    <Loading />
}


@code {

    private List<IngresoDTO> ingresosDTO { get; set; } = new List<IngresoDTO>();

    private List<IngresoDTO> ingresosAutorizados { get; set; }
    private List<IngresoDTO> ingresosPendientes { get; set; }

    private UsuarioDTO usuarioDTO { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarIngresos();
    }
    private async Task CargarIngresos()
    {
        usuarioDTO = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);
        ingresosDTO = await serviceIngreso.ObtenerIngAutYPendXProveedor(usuarioDTO.Proveedor.Id);
        ingresosPendientes = ingresosDTO.Where(t => t.EstadoAutorizacion == SD.TipoAutIng.PENDIENTE.ToString()).ToList();
        ingresosAutorizados = ingresosDTO.Where(t => t.EstadoAutorizacion == SD.TipoAutIng.AUTORIZADO.ToString()).ToList();
        StateHasChanged();
    }

}

