@page "/cargaIngresos"
@inject IServiceFuncionario serviceFuncionario



<EditForm Model="ingresoIndividual" OnValidSubmit="CargarNuevoIngreso">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <label>Cedula*</label>
            <InputText @bind-Value="ingresoIndividual.Funcionario.Cedula" class="form-control" />
            <ValidationMessage For="@( () => ingresoIndividual.Funcionario.Cedula)" />
        </div>
        <div class="col">
            <label>Nombre*</label>
            <InputText @bind-Value="ingresoIndividual.Funcionario.Nombre" class="form-control" />
            <ValidationMessage For="@( () => ingresoIndividual.Funcionario.Nombre)" />
        </div>
        <div class="col">
            <label>Entrada*</label>
            <input type="time" @bind="ingresoIndividual.EntradaPlanificada" class="form-control" />
            <ValidationMessage For="@( () => ingresoIndividual.EntradaPlanificada)" />
        </div>
        <div class="col">
            <label>Salida*</label>
            <input type="time" @bind="ingresoIndividual.SalidaPlanificada" class="form-control" />
            <ValidationMessage For="@( () => ingresoIndividual.SalidaPlanificada)" />
        </div>
        <div class="col">
            <label>Desde*</label>
            <InputDate @bind-Value="ingresoIndividual.FechaInicio" class="form-control" />
            <ValidationMessage For="@( () => ingresoIndividual.FechaInicio)" />
        </div>
        <div class="col">
            <label>Hasta*</label>
            <InputDate @bind-Value="ingresoIndividual.FechaFin" class="form-control" />
            <ValidationMessage For="@( () => ingresoIndividual.FechaFin)" />
        </div>

        <div class="col align-self-end">
            <button type="submit" class="btn btn-primary">Agregar a la lista</button>
        </div>
    </div>
</EditForm>

@*<RadzenDropDown AllowClear="true" TValue="string" Style="width:300px"
                Data=@(funcionariosDTO.Select(c => new { Nombre = c.Nombre }).Distinct())
                TextProperty="Nombre" ValueProperty="Id" Change=@(args => OnChangeFuncionario(args, "DropDown")) />*@

@*@if (funcionariosDTO != null && funcionariosDTO.Any())
    {
        <h3>Nuevos Ingresos</h3>
        <table class="table table-borderless">
            <thead>
                <tr>
                    <th scope="col">Cedula</th>
                    <th scope="col">Funcionario</th>
                    <th scope="col">Hora entrada</th>
                    <th scope="col">Hora salida</th>
                    <th scope="col">Desde</th>
                    <th scope="col">Hasta</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @if (ingresosDTO.Count > 0)
                {
                    @foreach (IngresoDTO ing in ingresosDTO)
                    {
                        <tr>
                            <td><InputText @bind-Value="ing.Funcionario.Cedula" /></td>
                            <td><InputText @bind-Value="ing.Funcionario.Nombre" /></td>
                            <td><input type="time" @bind="ing.EntradaPlanificada" @bind:format="HH:mm" /></td>
                            <td><input type="time" @bind="ing.SalidaPlanificada" @bind:format="HH:mm" /></td>
                            <td><InputDate @bind-Value="ing.FechaInicio" class="form-control" /></td>
                            <td><InputDate @bind-Value="ing.FechaFin" class="form-control" /></td>


                            <td><a href="" @onclick="(() => BorrarIngresoList(ing))" @onclick:preventDefault>Borrar</a></td>
                        </tr>
                    }
                }

                }
            </tbody>
        </table>
    }
    else
    {
        <Loading />
    }*@



@code {

    private IngresoDTO ingresoIndividual = new IngresoDTO();
    private List<IngresoDTO> ingresosDTO = new List<IngresoDTO>();
    private List<FuncionarioDTO> funcionariosDTO = new List<FuncionarioDTO>();
    private UsuarioDTO usuarioDTO = null;//cargar en el inicio , trae el localstorag
    private int? idFun;

    protected async override void OnInitialized()
    {
        usuarioDTO = new UsuarioDTO();
        usuarioDTO.Proveedor = new ProveedorDTO()
        {
            Id = 1
        };
        //usar el local storage
        funcionariosDTO = await serviceFuncionario.ObtenerTodosSegunProveedor(1);
        ingresoIndividual.Funcionario = new FuncionarioDTO();
        ingresoIndividual.Proveedor = usuarioDTO.Proveedor;
    }

    private void BorrarIngresoList(IngresoDTO idx)
    {
        ingresosDTO.Remove(idx);
        StateHasChanged();
    }

    private void CargarNuevoIngreso()
    {
        IngresoDTO ingresoDTO = new IngresoDTO()
        {

            Proveedor = usuarioDTO.Proveedor
        };

        ingresosDTO.Add(ingresoDTO);
        StateHasChanged();
    }
    void OnChangeFuncionario(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"{name} value changed to {str}");
    }

}

