@page "/ReportesOperador"
@inject IServiceIngresoDiario serviceIngresoDiario
@inject IServiceProveedor serviceProveedor
@inject IServiceArchivo serviceArchivo
@inject NavigationManager nav
@inject IJSRuntime js
@inject ILocalStorageService localStorage


<div class="d-flex justify-content-center">
    <h3>Reportes</h3>
</div>

<div class="d-flex justify-content-center" style="pointer-events: @mousePointer; opacity: @valorOpacidad;">
    <section class="recuadroPorteria">
        <div class="row ml-5">
            <div class="col">
                    <label>Desde</label>
                    <input type="date" id="desde" @bind="desde" class="form-control" max="@maxFecha.ToString("yyyy-MM-dd")" min="@minFecha.ToString("yyyy-MM-dd")"/>
                </div>
            <div class="col">
                <label>Hasta</label>
                <input type="date" id="hasta" @bind="hasta" class="form-control" max="@maxFecha.ToString("yyyy-MM-dd")" min="@minFecha.ToString("yyyy-MM-dd")"/>
            </div>

            <div class="col">
                <label>Proveedor</label>
                <select @onchange="OnChangeProveedor" class="form-control">
                    <option value="0">Todos los Proveedores</option>
                    @if (proveedoresDTO != null && proveedoresDTO.Count > 0)
                    {
                        @foreach (var pro in proveedoresDTO)
                        {
                            <option value="@pro.Id">@pro.RazonSocial (@pro.NombreFantasia) </option>
                        }
                    }
                </select>
            </div>
            <div class="col align-self-end">
                <button class="btn btn-primary" @onclick="FiltrarIngresos">Filtrar</button>
            </div>
        </div>
        <div class="row ml-5">
            <div class="col-12">
                <div class="form-check">
                    <input class="form-check-input" type="radio" id="efe" name="ingresos" value="@SD.TipoFecha.EFECTIVA.ToString()" @onchange="OnChangeRadio" checked>
                    <label class="form-check-label labelRadio" for="efe">
                        Ingresos marcados en porteria
                    </label>
                </div>
            </div>
            <div class="col-12">
                <div class="form-check">
                    <input class="form-check-input" type="radio" id="plan" name="ingresos" value="@SD.TipoFecha.PLANIFICADA.ToString()" @onchange="OnChangeRadio">
                    <label class="form-check-label labelRadio" for="plan">
                        Ingresos planificados posterior
                    </label>
                </div>
            </div>
        </div>


    </section>
</div>

@if (ingresosDiarios != null && ingresosDiarios.Any())
{
    <div class="d-flex justify-content-between">
        <button style="margin-top:5px;margin-bottom:5px;" class="btn btn-primary" @onclick="OnCerrar">Cerrar</button>
        <a href="" @onclick="(Exportar)" @onclick:preventDefault><img src="/img/export.png" class="botonExport" /></a>
    </div>

    <ContIngresoDiarioXProv ingresosXProveedor="@ingresosDiarios" TipoFecha="@tipoFecha" />

    <div class="d-flex justify-content-center">
        <button class="btn btn-primary" @onclick="OnCerrar">Cerrar</button>
    </div>
}
else if (ingresosDiarios != null && ingresosDiarios.Count == 0)
{
    <p style="color:orangered;">No hay registros segun el filtro seleccionado</p>
    <div class="d-flex justify-content-center">
        <button class="btn btn-primary" @onclick="OnCerrar">Cerrar</button>
    </div>
    <div class="dividerLogin"></div>
}
@if (cargar)
{
    <Loading />
}

@code {

    List<IngresoDiarioxProveedor> ingresosDiarios { get; set; } = null;
    UsuarioDTO usuarioDTO { get; set; } = null;
    List<ProveedorDTO> proveedoresDTO = null;

    private DateTime maxFecha = DateTime.Today.Date;
    private DateTime minFecha = DateTime.Today.Date.AddYears(-20);

    private string tipoFecha = SD.TipoFecha.EFECTIVA.ToString();

    private bool confirmacion { get; set; } = false;
    private bool cargar = false;
    private bool radioPlanificados = true;
    private bool radioEfectivos = false;

    private DateTime desde = DateTime.Today.Date;
    private DateTime hasta = DateTime.Today.Date;
    private ProveedorDTO proveedorSeleccionado = null;

    private string mousePointer = "auto";
    private string valorOpacidad = "1";

    protected override async Task OnInitializedAsync()
    {
        await CargarTerciarizacion();
    }

    private async Task CargarTerciarizacion()
    {

        UsuarioDTO usuarioDTO = await localStorage.GetItemAsync<UsuarioDTO>(SD.LocalUsuario);
        if (usuarioDTO != null)
        {
            proveedoresDTO = await serviceProveedor.ObtenerProveedores();
        }
        else
        {
            await js.MsgError("Hubo un error");
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            {
                 await js.DeshabilitarComponente("hasta", true);
            }
    }

    private async Task Exportar()
    {
        if (ingresosDiarios != null)
        {
            string tipoReporte = (tipoFecha == SD.TipoFecha.PLANIFICADA.ToString()) ? "planificados por el proveedor": "con marcas efectivas";
            cargar = true;
            ReporteIngreso reporte = new ReporteIngreso()
            {
                TipoFecha = tipoFecha,
                nombreArchivo= $"Reporte de Ingresos {tipoReporte} del {desde.ToString("dd-MM-yyyy")} al {hasta.ToString("dd-MM-yyyy")}.xlsx",
                IngresosXProveedores = ingresosDiarios
            };
            var descargaExcel = await serviceArchivo.DescargarExcel(reporte);
            await js.DescargarExcel(reporte.nombreArchivo, descargaExcel);
            cargar = false;
        }
    }
    private async Task FiltrarIngresos()
    {
        if (hasta >= desde) {
            cargar = true;
            mousePointer = "none";
            valorOpacidad = "0.5";

            if (tipoFecha == SD.TipoFecha.PLANIFICADA.ToString())
            {
                await ObtenerHorariosPlanificados();
            }
            else
            {
                await ObtenerHorariosEfectivos();
            }
        }
        else
        {
            await js.MsgAdvertencia("La fecha 'hasta' debe ser mayor que la fecha 'desde'. Se procede al cambio");
            DateTime temp = hasta;
            hasta = desde;
            desde = temp;
        }

    }
    private async Task ObtenerHorariosPlanificados()
    {
        desde = hasta;
        var resultado = await serviceIngresoDiario.ObtenerReporteHorariosPlanificados(new VMGeneral()
        {
            FechaActual = desde.Date,
            FechaFin = hasta.Date,
            ProveedorId = ((proveedorSeleccionado != null) ? proveedorSeleccionado.Id : 0)
        });
        cargar = false;
        if (resultado != null)
        {
            ingresosDiarios = resultado;
            StateHasChanged();
        }
        else
        {
            await js.MsgError("Hubo un error");
        }
    }
    private async Task ObtenerHorariosEfectivos()
    {
        var resultado = await serviceIngresoDiario.ObtenerReporteHorariosEfectivos(new VMGeneral()
        {
            FechaActual = desde.Date,
            FechaFin = hasta.Date,
            ProveedorId = ((proveedorSeleccionado != null) ? proveedorSeleccionado.Id : 0)
        });
        cargar = false;
        if (resultado != null)
        {
            ingresosDiarios = resultado;
            StateHasChanged();
        }
        else
        {
            await js.MsgError("Hubo un error");
        }
    }

    private async void OnChangeProveedor(ChangeEventArgs e)
    {
        try
        {
            int proId;
            Int32.TryParse(e.Value.ToString(), out proId);
            if (proId > 0)
            {
                var buscarProveedor = proveedoresDTO.Where(pro => pro.Id == proId).Single();
                if (buscarProveedor != null)
                {
                    proveedorSeleccionado = buscarProveedor;
                }
                else
                {
                    await js.MsgError("Hubo un error");
                }
            }
            else
            {
                proveedorSeleccionado = null;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.MsgError("Hubo un error");
        }

    }


    private async void OnChangeRadio(ChangeEventArgs e)
    {
        try
        {
            string valor = e.Value.ToString();
            if (!string.IsNullOrEmpty(valor))
            {
                tipoFecha = valor;
                if (tipoFecha == SD.TipoFecha.EFECTIVA.ToString())
                {
                    await js.DeshabilitarComponente("desde", false);
                    await js.DeshabilitarComponente("hasta", true);
                    desde = DateTime.Today.Date;
                    hasta = DateTime.Today.Date;
                    minFecha = DateTime.Today.Date.AddYears(-20);
                    maxFecha = DateTime.Today.Date;
                }
                else
                {
                    desde = DateTime.Today.Date;
                    await js.DeshabilitarComponente("desde", true);
                    await js.DeshabilitarComponente("hasta", false);
                    minFecha = DateTime.Today.Date;
                    maxFecha = DateTime.Today.AddYears(5);
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await js.MsgError("Hubo un error");
        }

    }

    private async Task OnCerrar()
    {
        ingresosDiarios = null;
        valorOpacidad = "1";
        mousePointer = "auto";
        StateHasChanged();
    }

}
